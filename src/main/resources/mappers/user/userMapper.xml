<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.wit.hrmatching.mapper.UserMapper">
    <insert id="insertUser" parameterType="org.wit.hrmatching.vo.UserVO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (
            email, password, name, role, email_verified, verification_token, token_expiration, login_type
        ) VALUES (
            #{email}, #{password}, #{name}, #{role}, #{emailVerified}, #{verificationToken}, #{tokenExpiration}, #{loginType}
        )
    </insert>

    <select id="existsByEmail" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM users WHERE email = #{email}
        )
    </select>

    <select id="findByEmail" resultType="UserVO">
        SELECT
            id,
            email,
            password,
            name,
            role,
            create_at AS createAt,
            status,
            warning_count AS warningCount,
            last_login AS lastLogin,
            profile_image AS profileImage,
            email_verified AS emailVerified,
            updated_at AS updatedAt,
            login_type AS loginType,
            verification_token AS verificationToken,
            token_expiration AS tokenExpiration
        FROM users
        WHERE email = #{email}
    </select>

    <!-- 유저 ID로 유저 정보 조회 -->
    <select id="findByUserId" resultType="UserVO">
        SELECT
            id,
            email,
            password,
            name,
            role,
            create_at AS createAt,
            status,
            warning_count AS warningCount,
            last_login AS lastLogin,
            profile_image AS profileImage,
            email_verified AS emailVerified,
            updated_at AS updatedAt,
            login_type AS loginType,
            verification_token AS verificationToken,
            token_expiration AS tokenExpiration
        FROM users
        WHERE id = #{userId}
    </select>

    <select id="findByToken" parameterType="string" resultType="UserVO">
        SELECT * FROM users WHERE verification_token = #{token}
    </select>

    <update id="updateUser" parameterType="UserVO">
        UPDATE users
        SET email_verified = #{emailVerified},
            verification_token = #{verificationToken},
            token_expiration = #{tokenExpiration}
        WHERE id = #{id}
    </update>

<!--    데이터 삭제 -->
    <delete id="deleteUserById" parameterType="long">
        DELETE FROM users WHERE id = #{id}
    </delete>

<!--    최종 로그인 -->
    <update id="updateLastLogin">
        UPDATE users SET last_login = NOW() WHERE id = #{id}
    </update>

</mapper>