<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.wit.hrmatching.mapper.community.BoardMapper">

    <select id="findAll" resultType="org.wit.hrmatching.vo.community.BoardVO">
        SELECT
            id,
            code,
            name,
            description,
            icon
        FROM community_board
        ORDER BY id ASC
    </select>

    <insert id="insertPost" parameterType="org.wit.hrmatching.vo.community.PostVO"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO community_post (board_id, user_id, title, content)
        VALUES (#{boardId}, #{userId}, #{title}, #{content})
    </insert>

    <insert id="insertAttachment" parameterType="org.wit.hrmatching.vo.community.AttachmentVO">
        INSERT INTO community_attachment (post_id, original_name, stored_name, file_size)
        VALUES (#{postId}, #{originalName}, #{storedName}, #{fileSize})
    </insert>

    <select id="getCommunityPostList" resultType="org.wit.hrmatching.dto.community.CommunityPostListDTO">
        SELECT
        p.id,
        b.name AS boardName,
        p.title,
        COALESCE(u.name, '탈퇴한 사용자') AS writerName,
        DATE_FORMAT(p.updated_at, '%Y-%m-%d') AS updatedAt,
        p.view_count,
        p.like_count,
        COUNT(c.id) AS commentCount,
        CASE
        WHEN EXISTS (
        SELECT 1
        FROM community_post_like pl
        WHERE pl.post_id = p.id
        AND pl.user_id = #{userId}
        ) THEN TRUE
        ELSE FALSE
        END AS liked
        FROM community_post p
        JOIN community_board b ON p.board_id = b.id
        LEFT JOIN users u ON p.user_id = u.id  <!-- ✅ 변경됨 -->
        LEFT JOIN community_comment c ON p.id = c.post_id AND c.is_deleted = 0
        WHERE p.is_deleted = 0
        <choose>
            <when test="boardCode != null and boardCode != '' and boardCode != 'all'">
                AND b.code = #{boardCode}
            </when>
        </choose>
        GROUP BY p.id, b.name, p.title, u.name, p.updated_at, p.view_count, p.like_count
        ORDER BY p.updated_at DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="getCommunityPostCount" resultType="long">
        SELECT COUNT(*)
        FROM community_post p
        JOIN community_board b ON p.board_id = b.id
        WHERE p.is_deleted = 0
        <choose>
            <when test="boardCode != null and boardCode != '' and boardCode != 'all'">
                AND b.code = #{boardCode}
            </when>
        </choose>
    </select>

    <!-- 게시글 + 작성자 + 게시판 정보 -->
    <select id="selectPostDetail" resultType="org.wit.hrmatching.dto.community.PostDetailDTO">
        SELECT
            p.id,
            p.title,
            p.content,
            p.view_count AS viewCount,
            p.like_count AS likeCount,
            DATE_FORMAT(p.created_at, '%Y-%m-%d %H:%i') AS createdAt,
            COALESCE(u.name, '(탈퇴한 사용자)') AS writerName,
            p.user_id AS writerId,
            b.code AS boardCode,
            b.name AS boardName,
            b.description AS boardDescription
        FROM community_post p
                 LEFT JOIN users u ON p.user_id = u.id
                 JOIN community_board b ON p.board_id = b.id
        WHERE p.id = #{postId}
    </select>


    <!-- 첨부파일 목록 -->
    <select id="selectAttachmentsByPostId" resultType="org.wit.hrmatching.vo.community.AttachmentVO">
        SELECT
            id, post_id AS postId, original_name AS originalName,
            stored_name AS storedName, file_size AS fileSize, uploaded_at
        FROM community_attachment
        WHERE post_id = #{postId}
    </select>

    <!-- 댓글 목록 (평면 구조) -->
    <select id="selectCommentsByPostId" resultType="org.wit.hrmatching.vo.community.CommentVO">
        SELECT
            c.id,
            c.post_id AS postId,
            c.user_id AS userId,
            c.parent_id AS parentId,
            c.content,
            c.like_count AS likeCount,
            c.is_deleted AS isDeleted,
            c.created_at,
            COALESCE(u.name, '탈퇴한 사용자') AS writerName,
            u.email,
            (
                SELECT COUNT(*) > 0
                FROM community_comment_like cl
                WHERE cl.comment_id = c.id AND cl.user_id = #{userId}
            ) AS isLiked
        FROM community_comment c
                 LEFT JOIN users u ON c.user_id = u.id
        WHERE c.post_id = #{postId}
        ORDER BY c.created_at ASC
    </select>



    <update id="incrementViewCount">
        UPDATE community_post
        SET view_count = view_count + 1
        WHERE id = #{postId}
    </update>

    <select id="hasUserLikedPost" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM community_post_like
        WHERE post_id = #{postId} AND user_id = #{userId}
    </select>

    <insert id="insertPostLike">
        INSERT IGNORE INTO community_post_like (post_id, user_id)
        VALUES (#{postId}, #{userId})
    </insert>

    <delete id="deletePostLike">
        DELETE FROM community_post_like
        WHERE post_id = #{postId} AND user_id = #{userId}
    </delete>

    <select id="countPostLikes" resultType="int">
        SELECT like_count
        FROM community_post
        WHERE id = #{postId}
    </select>

    <update id="increasePostLikeCount">
        UPDATE community_post
        SET like_count = like_count + 1
        WHERE id = #{postId}
    </update>

    <update id="decreasePostLikeCount">
        UPDATE community_post
        SET like_count = like_count - 1
        WHERE id = #{postId} AND like_count > 0
    </update>

    <update id="softDeletePost">
        UPDATE community_post
        SET is_deleted = 1, updated_at = NOW()
        WHERE id = #{postId} AND user_id = #{userId}
    </update>


    <!-- 댓글 목록 조회 (parent_id IS NULL) -->
    <select id="getParentComments" resultType="org.wit.hrmatching.vo.community.CommentVO">
        SELECT
            c.id,
            c.post_id AS postId,
            c.user_id AS userId,
            c.parent_id AS parentId,
            c.content,
            c.like_count AS likeCount,
            c.is_deleted AS isDeleted,
            c.created_at,
            COALESCE(u.name, '탈퇴한 사용자') AS writerName,
            u.email AS email,
            CASE WHEN c.user_id = #{postWriterId} THEN true ELSE false END AS is_writer
        FROM community_comment c
                 LEFT JOIN users u ON c.user_id = u.id
        WHERE c.post_id = #{postId}
          AND c.parent_id IS NULL
        ORDER BY c.created_at ASC
    </select>



    <!-- 대댓글 목록 조회 -->
    <select id="getChildComments" resultType="org.wit.hrmatching.vo.community.CommentVO">
        SELECT
            c.id,
            c.post_id AS postId,
            c.user_id AS userId,
            c.parent_id AS parentId,
            c.content,
            c.like_count AS likeCount,
            c.is_deleted AS isDeleted,
            c.created_at,
            COALESCE(u.name, '탈퇴한 사용자') AS writerName,
            u.email AS email,
            CASE WHEN c.user_id = #{postWriterId} THEN true ELSE false END AS is_writer
        FROM community_comment c
                 LEFT JOIN users u ON c.user_id = u.id
        WHERE c.parent_id = #{parentId}
        ORDER BY c.created_at ASC
    </select>



    <!-- 댓글 등록 -->
    <insert id="insertComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO community_comment (post_id, user_id, parent_id, content, created_at)
        VALUES (#{postId}, #{userId}, #{parentId}, #{content}, NOW())
    </insert>

    <!-- 댓글 삭제 (소프트 삭제) -->
    <update id="deleteComment">
        UPDATE community_comment SET is_deleted = 1 WHERE id = #{id}
    </update>

    <!-- 댓글 수정 -->
    <update id="updateComment">
        UPDATE community_comment SET content = #{content} WHERE id = #{id}
    </update>

    <select id="selectPostWriter" resultType="org.wit.hrmatching.vo.community.PostVO">
        SELECT id, user_id
        FROM community_post
        WHERE id = #{postId}
    </select>

    <!-- 댓글 좋아요 여부 확인 -->
    <select id="hasUserLikedComment" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM community_comment_like
            WHERE comment_id = #{commentId}
              AND user_id = #{userId}
        )
    </select>


    <!-- 댓글 좋아요 등록 -->
    <insert id="insertCommentLike">
        INSERT IGNORE INTO community_comment_like (comment_id, user_id)
        VALUES (#{commentId}, #{userId})
    </insert>


    <!-- 댓글 좋아요 취소 -->
    <delete id="deleteCommentLike">
        DELETE FROM community_comment_like
        WHERE comment_id = #{commentId} AND user_id = #{userId}
    </delete>

    <!-- 댓글 좋아요 수 증가 -->
    <update id="increaseCommentLikeCount">
        UPDATE community_comment
        SET like_count = like_count + 1
        WHERE id = #{commentId}
    </update>

    <!-- 댓글 좋아요 수 감소 -->
    <update id="decreaseCommentLikeCount">
        UPDATE community_comment
        SET like_count = like_count - 1
        WHERE id = #{commentId} AND like_count > 0
    </update>

    <!-- 댓글 좋아요 수 조회 -->
    <select id="getCommentLikeCount" resultType="int">
        SELECT like_count
        FROM community_comment
        WHERE id = #{commentId}
    </select>

    <select id="getUserLikedCommentIds" resultType="long">
        SELECT comment_id
        FROM community_comment_like ccl
                 JOIN community_comment cc ON ccl.comment_id = cc.id
        WHERE cc.post_id = #{postId} AND ccl.user_id = #{userId}
    </select>


    <select id="selectAttachmentById" resultType="org.wit.hrmatching.vo.community.AttachmentVO">
        SELECT *
        FROM community_attachment
        WHERE id = #{id}
    </select>

    <select id="selectPostWithBoard" resultMap="PostWithBoardMap">
        SELECT
            p.id AS post_id,
            p.user_id,
            p.board_id,
            p.title,
            p.content,
            b.id AS board_id,
            b.code AS board_code,
            b.name AS board_name,
            b.description AS board_description
        FROM community_post p
                 JOIN community_board b ON p.board_id = b.id
        WHERE p.id = #{postId}
    </select>

    <resultMap id="PostWithBoardMap" type="org.wit.hrmatching.vo.community.PostVO">
        <id property="id" column="post_id"/>
        <result property="userId" column="user_id"/>
        <result property="boardId" column="board_id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>

        <association property="board" javaType="org.wit.hrmatching.vo.community.BoardVO">
            <id property="id" column="board_id"/>
            <result property="code" column="board_code"/>
            <result property="name" column="board_name"/>
            <result property="description" column="board_description"/>
        </association>
    </resultMap>

    <update id="updatePost">
        UPDATE community_post
        SET title = #{title},
            content = #{content},
            board_id = #{boardId},
            updated_at = NOW()
        WHERE id = #{postId}
    </update>

    <select id="findAttachmentIdsByPostId" resultType="long">
        SELECT id FROM community_attachment WHERE post_id = #{postId}
    </select>

    <delete id="deleteAttachmentsByIds">
        DELETE FROM community_attachment
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>